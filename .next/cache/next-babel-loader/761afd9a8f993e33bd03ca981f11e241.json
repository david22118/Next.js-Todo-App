{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\David\\\\Downloads\\\\home\\\\ReactNotesList-NextJs\\\\components\\\\TasksList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AddTask from \"../components/AddTask\";\n\nvar dateFormat = require(\"dateformat\");\n\nvar now = new Date();\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    toolbar: {\n      justifyContent: \"flex-end\",\n      flexDirection: \"row\"\n    }\n  };\n});\nvar TasksList = inject(\"tasksManager\")(observer(function (props) {\n  var classes = useStyles();\n  /*  useEffect(() => {\r\n     (async () => {\r\n       await props.tasksManager.getTasks();\r\n     })();\r\n   }, []); */\n\n  var _useState = useState({\n    task: {\n      name: \"\",\n      startDate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\n      lastUpdate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\")\n    },\n    detail: {},\n    alerts: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var handleChange = function handleChange(e, type) {\n    var name = e.target.value;\n    setState(_objectSpread({}, state, _defineProperty({}, type, _objectSpread({}, state[type], {\n      name: name\n    }))));\n  };\n\n  var handlClick = function handlClick(type) {\n    return _regeneratorRuntime.async(function handlClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(props.tasksManager.addTask(state[type]));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  console.log(state);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(AppBar, {\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Toolbar, {\n    className: classes.toolbar,\n    variant: \"dense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Typography, {\n    style: {\n      marginRight: '34vw'\n    },\n    variant: \"h5\",\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"To Do\"), __jsx(MenuItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(IconButton, {\n    \"aria-label\": \"show 4 new mails\",\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Badge, {\n    badgeContent: props.tasksManager.tasksSum,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(AssignmentIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Open\"))))), __jsx(AddTask, {\n    name: 'task',\n    handleChange: handleChange,\n    handlClick: handlClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n}));\nexport default TasksList;","map":{"version":3,"sources":["C:/Users/David/Downloads/home/ReactNotesList-NextJs/components/TasksList.js"],"names":["React","useEffect","useState","observer","inject","makeStyles","AppBar","Toolbar","Typography","IconButton","Badge","MenuItem","AssignmentIcon","AddTask","dateFormat","require","now","Date","useStyles","theme","root","flexGrow","toolbar","justifyContent","flexDirection","TasksList","props","classes","task","name","startDate","lastUpdate","detail","alerts","state","setState","handleChange","e","type","target","value","handlClick","tasksManager","addTask","console","log","marginRight","tasksSum"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport AddTask from \"../components/AddTask\";\r\n\r\nconst dateFormat = require(\"dateformat\");\r\nconst now = new Date();\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbar:{\r\n     justifyContent:\"flex-end\",\r\n     flexDirection:\"row\",\r\n    \r\n\r\n  },\r\n}));\r\n\r\nconst TasksList = inject(\"tasksManager\")(\r\n  observer((props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n    \r\n   /*  useEffect(() => {\r\n      (async () => {\r\n        await props.tasksManager.getTasks();\r\n      })();\r\n    }, []); */\r\n\r\n    const [state, setState] = useState({\r\n    task: {\r\n      name: \"\",\r\n      startDate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\r\n      lastUpdate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\r\n    },\r\n    detail: {},\r\n    alerts: {},\r\n  });\r\n  \r\n  const handleChange=(e,type)=>{\r\n  const name = e.target.value\r\n  setState({...state,[type]:{...state[type],name:name}})\r\n  }\r\n\r\n  const handlClick= async(type)=>{\r\n    await props.tasksManager.addTask(state[type])\r\n    \r\n  }\r\n  console.log(state)\r\n    return (\r\n      <>\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar  className={classes.toolbar} variant=\"dense\">\r\n            <Typography style={{marginRight:'34vw'}}  variant=\"h5\" color=\"inherit\">\r\n            To Do\r\n            </Typography>\r\n            <MenuItem>\r\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={props.tasksManager.tasksSum} color=\"secondary\">\r\n            <AssignmentIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Open</p>\r\n      </MenuItem>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n      <AddTask  name={'task'} handleChange={handleChange} handlClick={handlClick} />\r\n      </>\r\n    );\r\n\r\n   \r\n\r\n\r\n\r\n  })\r\n);\r\nexport default TasksList;\r\n"]},"metadata":{},"sourceType":"module"}