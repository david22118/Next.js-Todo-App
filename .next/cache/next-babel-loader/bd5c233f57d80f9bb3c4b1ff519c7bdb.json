{"ast":null,"code":"import _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _initializerDefineProperty from \"@babel/runtime-corejs2/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime-corejs2/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime-corejs2/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, action } from 'mobx';\nimport axios from 'axios';\nexport let NotesStore = (_class = (_temp = class NotesStore {\n  constructor() {\n    _initializerDefineProperty(this, \"todoList\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"notesList\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"currNote\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"notesNum\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"debb\", _descriptor5, this);\n  }\n\n  getNotes() {\n    axios.get('http://localhost:8080/Data').then(response => {\n      console.log(response);\n      /*  console.log('in get NOTES');\r\n       console.log(response.data); */\n\n      this.notesList = response.data;\n      this.notesNum = this.notesList.length;\n      console.log(this.notesNum);\n    });\n  }\n\n  addNote(note) {\n    axios.post('http://localhost:5000/notes/add', note).then(res => {\n      const noteToAdd = {\n        name: note.name,\n        _id: res.data._id,\n        todoList: res.data.todoList\n      };\n      this.notesList.push(noteToAdd);\n      this.notesNum = this.notesNum + 1; // console.log(this.notesList);\n    }).catch(err => console.log(err));\n  }\n\n  addTodo(noteId, todo) {\n    console.log(todo);\n    axios.post('http://localhost:5000/notes/' + noteId + '/todoList/add', {\n      noteId,\n      todo\n    }).then(note => {\n      console.log(note);\n      let changedIndex = this.notesList.findIndex(x => x._id == note.data._id);\n      this.notesList[changedIndex] = note.data; //this.getNotes();\n    }).catch(err => console.log(err));\n  }\n\n  toggleCheckbox(noteId, todoId) {\n    axios.put('http://localhost:5000/notes/' + noteId + '/todoList/' + todoId).then(note => {\n      let changedIndex = this.notesList.findIndex(x => x._id == note.data._id);\n      this.notesList[changedIndex] = note.data; // this.getNotes();\n    }).catch(err => console.log(err));\n  }\n\n  deleteNote(id) {\n    axios.delete('http://localhost:5000/notes/' + id).then(response => {\n      console.log(response.data);\n      this.notesList = this.notesList.filter(note => note._id !== id);\n      this.notesNum = this.notesNum - 1;\n    }).catch(err => console.log(err));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"todoList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [{\n      task: 'bibi',\n      isComplete: true\n    }];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"notesList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"currNote\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"notesNum\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"debb\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"addNote\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"addNote\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"addTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"toggleCheckbox\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"toggleCheckbox\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteNote\", [action], _Object$getOwnPropertyDescriptor(_class.prototype, \"deleteNote\"), _class.prototype)), _class); //export const todoStore = new TodoStore();","map":{"version":3,"sources":["C:/Users/David/Downloads/home/code/My/ReactNotesList-NextJs/stores/notesStore.tsx"],"names":["observable","action","axios","NotesStore","getNotes","get","then","response","console","log","notesList","data","notesNum","length","addNote","note","post","res","noteToAdd","name","_id","todoList","push","catch","err","addTodo","noteId","todo","changedIndex","findIndex","x","toggleCheckbox","todoId","put","deleteNote","id","delete","filter","task","isComplete"],"mappings":"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","sourcesContent":["import { observable, action} from 'mobx';\r\nimport axios from 'axios';\r\n\r\n\r\nexport interface Todo {\r\n    task: string\r\n    isComplete: boolean\r\n    _id?: string\r\n}\r\n\r\nexport interface Note {\r\n    name: string;\r\n    _id: any;\r\n    todoList: Todo [];\r\n}\r\n\r\nexport class NotesStore {\r\n    @observable todoList: Todo[] = [{task: 'bibi', isComplete: true}];\r\n    @observable notesList: Note [] = [];\r\n    @observable currNote: string = '';\r\n    @observable notesNum: number = 0;\r\n\r\n\r\n\r\n    @action\r\n    debb\r\n    getNotes(){\r\n        axios.get('http://localhost:8080/Data')\r\n            .then(response => {\r\n                console.log(response);\r\n               /*  console.log('in get NOTES');\r\n                console.log(response.data); */\r\n                this.notesList = response.data;\r\n                this.notesNum = this.notesList.length;\r\n                console.log(this.notesNum);\r\n            });\r\n    }\r\n\r\n    @action\r\n    addNote(note: any){\r\n        axios.post('http://localhost:5000/notes/add', note)\r\n            .then(res => {\r\n                const noteToAdd = {\r\n                    name: note.name,\r\n                    _id: res.data._id,\r\n                    todoList: res.data.todoList\r\n                };\r\n                this.notesList.push(noteToAdd);\r\n                this.notesNum = this.notesNum + 1;\r\n                // console.log(this.notesList);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    @action\r\n    addTodo(noteId: string, todo: Todo) {\r\n        console.log(todo);\r\n        axios.post('http://localhost:5000/notes/' + noteId + '/todoList/add', {noteId, todo})\r\n            .then(note => {\r\n                console.log(note);\r\n                let changedIndex = this.notesList.findIndex(x => x._id == note.data._id);\r\n                this.notesList[changedIndex] = note.data;\r\n                //this.getNotes();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    @action\r\n    toggleCheckbox(noteId: string, todoId: string){\r\n        axios.put('http://localhost:5000/notes/' + noteId + '/todoList/' + todoId)\r\n            .then(note =>{\r\n                let changedIndex = this.notesList.findIndex(x => x._id == note.data._id);\r\n                this.notesList[changedIndex] = note.data;\r\n               // this.getNotes();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    @action\r\n    deleteNote(id: string){\r\n        axios.delete('http://localhost:5000/notes/'+id)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.notesList = this.notesList.filter(note => note._id !== id);\r\n                this.notesNum = this.notesNum - 1;\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n}\r\n\r\n//export const todoStore = new TodoStore();\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}