{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\next.js Todo\\\\Components\\\\Tasks\\\\Taskslist.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { inject, observer } from \"mobx-react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Taskinfo from \"./Taskinfo\";\nimport QueuePlayNextIcon from \"@material-ui/icons/QueuePlayNext\";\nimport AddDetail from \"../Add/AddDetail\";\nimport Snackbar from \"../SnackBar/Snackbar\";\n\nconst dateFormat = require(\"dateformat\");\n\nconst now = new Date();\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.secondary.main,\n    fontSize: 14,\n    padding: 5\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst useStyles = makeStyles({\n  table: {\n    maxWidth: 200\n  }\n});\nconst TasksList = inject(\"tasksManager\")(observer(props => {\n  const classes = useStyles();\n  const tasks = props.tasksManager.tasks;\n  const [state, setState] = React.useState({\n    name: \"\",\n    startDate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\n    lastUpdate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\")\n  });\n  const [open, setOpen] = React.useState({\n    openAdd: false,\n    snakBar: false,\n    message: \"\",\n    severity: \"\"\n  });\n\n  const handeleChange = (event, name) => {\n    setState(_objectSpread({}, state, {\n      [name]: event.target.value\n    }));\n  };\n\n  const handelesave = async state => {\n    if (props.tasksManager.tasksSum == 10) {\n      setOpen(_objectSpread({}, open, {\n        snakBar: true,\n        message: \"The amount of tasks is limited to 10!\",\n        severity: \"error\"\n      }));\n      return;\n    }\n\n    if (state.name.length <= 2) {\n      setOpen(_objectSpread({}, open, {\n        snakBar: true,\n        message: \"Give the Task a name or description\",\n        severity: \"error\"\n      }));\n      return;\n    }\n\n    const response = await props.tasksManager.addTask(state);\n    setOpen(_objectSpread({}, open, {\n      snakBar: true,\n      message: response,\n      severity: \"success\"\n    }));\n    setState(_objectSpread({}, state, {\n      name: \"\"\n    }));\n  };\n\n  const handleClickOpen = () => {\n    setOpen(_objectSpread({}, open, {\n      openAdd: true\n    }));\n  };\n\n  const handleClose = () => {\n    setOpen(_objectSpread({}, open, {\n      openAdd: false\n    }));\n  };\n\n  return __jsx(Grid, {\n    style: {\n      marginTop: \"25px\"\n    },\n    container: true,\n    spacing: 1,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(TableContainer, {\n    component: Paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"customized table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(QueuePlayNextIcon, {\n    onClick: handleClickOpen,\n    cursor: \"pointer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Description\"), __jsx(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Start Date\"), __jsx(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Last Update\"), __jsx(StyledTableCell, {\n    align: \"justify\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Actions\"))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, tasks.map(task => __jsx(Taskinfo, {\n    id: task.id,\n    key: task.id,\n    name: task.name,\n    startDate: task.startDate,\n    lastUpdate: task.lastUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })))))), __jsx(Add, {\n    open: open.openAdd,\n    state: state,\n    handeleChange: handeleChange,\n    handelesave: handelesave,\n    handleClose: handleClose,\n    savedDescription: \"Task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), __jsx(Snackbar, {\n    open: open,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n}));\nexport default TasksList;","map":{"version":3,"sources":["C:/Users/David/Desktop/next.js Todo/Components/Tasks/Taskslist.jsx"],"names":["React","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","inject","observer","Grid","Taskinfo","QueuePlayNextIcon","AddDetail","Snackbar","dateFormat","require","now","Date","StyledTableCell","theme","head","backgroundColor","palette","primary","main","color","secondary","fontSize","padding","body","useStyles","table","maxWidth","TasksList","props","classes","tasks","tasksManager","state","setState","useState","name","startDate","lastUpdate","open","setOpen","openAdd","snakBar","message","severity","handeleChange","event","target","value","handelesave","tasksSum","length","response","addTask","handleClickOpen","handleClose","marginTop","map","task","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Taskinfo from \"./Taskinfo\";\r\nimport QueuePlayNextIcon from \"@material-ui/icons/QueuePlayNext\";\r\nimport AddDetail from \"../Add/AddDetail\";\r\nimport Snackbar from \"../SnackBar/Snackbar\";\r\nconst dateFormat = require(\"dateformat\");\r\nconst now = new Date();\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.secondary.main,\r\n    fontSize: 14,\r\n    padding: 5,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    maxWidth: 200,\r\n  },\r\n});\r\n\r\nconst TasksList = inject(\"tasksManager\")(\r\n  observer((props) => {\r\n    const classes = useStyles();\r\n    const tasks = props.tasksManager.tasks;\r\n\r\n    const [state, setState] = React.useState({\r\n      name: \"\",\r\n      startDate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\r\n      lastUpdate: dateFormat(now, \"yyyy-mm-dd'T'HH:MM:ss\"),\r\n    });\r\n    const [open, setOpen] = React.useState({\r\n      openAdd: false,\r\n      snakBar: false,\r\n      message: \"\",\r\n      severity: \"\",\r\n    });\r\n    const handeleChange = (event, name) => {\r\n      setState({\r\n        ...state,\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n    const handelesave = async (state) => {\r\n      if (props.tasksManager.tasksSum == 10) {\r\n        setOpen({\r\n          ...open,\r\n          snakBar: true,\r\n          message: \"The amount of tasks is limited to 10!\",\r\n          severity: \"error\",\r\n        });\r\n        return;\r\n      }\r\n      if (state.name.length <= 2) {\r\n        setOpen({\r\n          ...open,\r\n          snakBar: true,\r\n          message: \"Give the Task a name or description\",\r\n          severity: \"error\",\r\n        })\r\n        return;\r\n      }\r\n      const response = await props.tasksManager.addTask(state);\r\n      setOpen({\r\n        ...open,\r\n        snakBar: true,\r\n        message: response,\r\n        severity: \"success\",\r\n      });\r\n\r\n      setState({ ...state, name: \"\" });\r\n    };\r\n\r\n   \r\n    const handleClickOpen = () => {\r\n      setOpen({ ...open, openAdd: true });\r\n    };\r\n    const handleClose = () => {\r\n      setOpen({ ...open, openAdd: false });\r\n    };\r\n\r\n    return (\r\n      <Grid\r\n        style={{ marginTop: \"25px\" }}\r\n        container\r\n        spacing={1}\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n              <TableHead>\r\n                <QueuePlayNextIcon onClick={handleClickOpen} cursor=\"pointer\" />\r\n                <TableRow>\r\n                  <StyledTableCell align=\"left\">Description</StyledTableCell>\r\n                  <StyledTableCell align=\"left\">Start Date</StyledTableCell>\r\n                  <StyledTableCell align=\"left\">Last Update</StyledTableCell>\r\n                  <StyledTableCell align=\"justify\">Actions</StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tasks.map((task) => (\r\n                  <Taskinfo\r\n                    id={task.id}\r\n                    key={task.id}\r\n                    name={task.name}\r\n                    startDate={task.startDate}\r\n                    lastUpdate={task.lastUpdate}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n        <Add\r\n          open={open.openAdd}\r\n          state={state}\r\n          handeleChange={handeleChange}\r\n          handelesave={handelesave}\r\n          handleClose={handleClose}\r\n          savedDescription={\"Task\"}\r\n        />\r\n        <Snackbar open={open} setOpen={setOpen} />\r\n      </Grid>\r\n    );\r\n  })\r\n);\r\nexport default TasksList;\r\n"]},"metadata":{},"sourceType":"module"}